name: Build and Deploy
run-name: ðŸš€ ${{ contains(github.event.workflow_run.head_branch, 'deploy-to-steam') && 'Build and Deploy to Steam' || 'Build'}} on `${{ github.event.workflow_run.head_branch }}` by ${{ github.actor }} ðŸ’¬ `${{ github.event.workflow_run.head_commit.message }}`

on:
  workflow_run:
    workflows: ["Test"]
    types: [completed]
    branches:
      - main
      - dev
      - 'deploy-to-steam'

jobs:
  build-linux:
    # if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set build directory
        id: strings
        run: |
          echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"
          
      - name: Install Conan
        run: |
          sudo apt-get update
          sudo apt-get install -y libgl1-mesa-dev
          sudo apt-get install -y libx11-dev libx11-xcb-dev libfontenc-dev \
            libice-dev libsm-dev libxau-dev libxaw7-dev libxcomposite-dev \
            libxcursor-dev libxdamage-dev libxfixes-dev libxi-dev \
            libxinerama-dev libxmu-dev libxmuu-dev libxpm-dev libxrandr-dev \
            libxres-dev libxss-dev libxtst-dev libxv-dev libxxf86vm-dev \
            libxcb-glx0-dev libxcb-render-util0-dev libxcb-xkb-dev \
            libxcb-icccm4-dev libxcb-image0-dev libxcb-keysyms1-dev \
            libxcb-randr0-dev libxcb-shape0-dev libxcb-sync-dev \
            libxcb-xfixes0-dev libxcb-xinerama0-dev \
            libxcb-dri3-dev libxcb-cursor-dev libxcb-dri2-0-dev \
            libxcb-present-dev libxcb-composite0-dev libxcb-ewmh-dev \
            libxcb-res0-dev libxcb-util-dev libxcb-util0-dev
          sudo apt-get install -y python3-pip
          pip3 install conan
          conan profile detect

      - name: Install Dependencies with Conan
        run: |
          conan install . --build=missing --output-folder=build

      - name: Configure CMake And Build
        run: |
          cd build
          cmake .. -DCMAKE_BUILD_TYPE=Release
          cmake --build . --config Release

      # - name: Test
      #   working-directory: ${{ steps.strings.outputs.build-output-dir }}
      #   run: ctest --build-config Release

      - name: Copy Build Files
        run: |
          mkdir -p ${{ github.workspace }}/_builds/linux/
          cp ${{ github.workspace }}/bin/* ${{ github.workspace }}/_builds/linux/

      - name: Upload Linux Build Files
        uses: actions/upload-artifact@v4
        with:
          name: linux-build-files
          path: ${{ github.workspace }}/_builds

  build-windows:
    # if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set build directory
        id: strings
        run: |
          echo "build-output-dir=${env:GITHUB_WORKSPACE}\build" | Out-File -FilePath $env:GITHUB_OUTPUT

      - name: Install Python and Conan
        run: |
          python -m pip install --upgrade pip
          pip install conan
          conan profile detect

      - name: Install Dependencies with Conan
        run: |
          conan install . --build=missing --output-folder=build

      - name: Configure CMake
        run: |
          cd build
          cmake .. -DCMAKE_BUILD_TYPE=Release
          cmake --build . --config Release

      - name: Build
        run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config Release

      # - name: Test
      #   working-directory: ${{ steps.strings.outputs.build-output-dir }}
      #   run: ctest --build-config Release

      - name: Copy Build Files
        run: |
          mkdir -p ${{ github.workspace }}/_builds/win/
          cp ${{ github.workspace }}/bin/Release/* ${{ github.workspace }}/_builds/win/

      - name: Upload Windows Build Files
        uses: actions/upload-artifact@v4
        with:
          name: windows-build-files
          path: ${{ github.workspace }}/_builds

  build-mac:
    # if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set build directory
        id: strings
        run: |
          echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

      - name: Install Homebrew
        run: |
          /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
          echo 'eval "$(/opt/homebrew/bin/brew shellenv)"' >> ~/.zprofile
          eval "$(/opt/homebrew/bin/brew shellenv)"

      - name: Install Conan
        run: |
          brew install conan
          conan profile detect

      - name: Install Dependencies
        run: |
          conan install . --build=missing

      - name: Build
        run: |
          conan install . --output-folder=build
          cd build
          cmake .. -DCMAKE_BUILD_TYPE=Release
          cmake --build . --config Release

      # - name: Test
      #   working-directory: ${{ steps.strings.outputs.build-output-dir }}
      #   run: ctest --build-config Release

      - name: Copy Build Files
        run: |
          mkdir -p ${{ github.workspace }}/_builds/mac/
          cp ${{ github.workspace }}/bin/* ${{ github.workspace }}/_builds/mac/

      - name: Upload Mac Build Files
        uses: actions/upload-artifact@v4
        with:
          name: mac-build-files
          path: ${{ github.workspace }}/_builds/

  upload-Steam:
    runs-on: ubuntu-latest
    needs: [build-linux, build-windows, build-mac]
    # if: github.event.workflow_run.head_branch == 'deploy-to-steam'
    steps:
      - uses: actions/checkout@v2

      - name: Download Windows Build Files
        uses: actions/download-artifact@v4
        with:
          name: windows-build-files

      - name: Download Mac Build Files
        uses: actions/download-artifact@v4
        with:
          name: mac-build-files

      - name: Download Linux Build Files
        uses: actions/download-artifact@v4
        with:
          name: linux-build-files

      - name: Confirm build files
        run: |
          tree ${{ github.workspace }}

      - uses: game-ci/steam-deploy@v3
        with:
          username: developermoca
          configVdf: ${{ secrets.STEAM_CONFIG_VDF }}
          appId: 2895780
          buildDescription: v0.1.3
          rootPath: /
          depot1Path: win/
          depot2Path: mac/
          depot3Path: linux/
          releaseBranch: prerelease